---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: grafana

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
  selector:
    io.kompose.service: kafka

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: kafka-exporter
  name: kafka-exporter
spec:
  ports:
    - name: "9308"
      port: 9308
      targetPort: 9308
  selector:
    io.kompose.service: kafka-exporter

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: kafka-ui
  name: kafka-ui
spec:
  type: NodePort
  ports:
    - name: "29092"
      port: 29092
      targetPort: 8080
      nodePort: 30007
  selector:
    io.kompose.service: kafka-ui

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    io.kompose.service: prometheus

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
  selector:
    io.kompose.service: zookeeper

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
        kompose.version: 1.32.0 (HEAD)
      labels:
        io.kompose.network/docker-default: "true"
        io.kompose.service: grafana
    spec:
      containers:
        - image: grafana/grafana
          name: grafana
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
        kompose.version: 1.32.0 (HEAD)
      labels:
        io.kompose.network/docker-default: "true"
        io.kompose.service: kafka
    spec:
      containers:
        - env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: PLAINTEXT://10.60.130.32:9092,INTERNAL://kafka:9093
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_CFG_LISTENERS
              value: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
          image: bitnami/kafka:latest
          name: kafka
          ports:
            - containerPort: 9092
              hostPort: 9092
              protocol: TCP
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: kafka-exporter
  name: kafka-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka-exporter
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
        kompose.version: 1.32.0 (HEAD)
      labels:
        io.kompose.network/docker-default: "true"
        io.kompose.service: kafka-exporter
    spec:
      containers:
        - args:
            - --kafka.server=kafka:9093
          image: danielqsj/kafka-exporter
          name: kafka-exporter
          ports:
            - containerPort: 9308
              hostPort: 9308
              protocol: TCP
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: kafka-ui
  name: kafka-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka-ui
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
        kompose.version: 1.32.0 (HEAD)
      labels:
        io.kompose.network/docker-default: "true"
        io.kompose.service: kafka-ui
    spec:
      containers:
        - env:
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: kafka:9093
            - name: KAFKA_CLUSTERS_0_NAME
              value: kafka
            - name: KAFKA_CLUSTERS_0_ZOOKEEPER
              value: zookeeper:2181
          image: provectuslabs/kafka-ui
          name: kafka-ui
          ports:
            - containerPort: 8080
              hostPort: 29092
              protocol: TCP
      restartPolicy: Always

---
apiVersion: v1
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'prometheus'
        scrape_interval: 5s
        static_configs:
          - targets: ['10.60.130.33:9090']

      - job_name: 'spring-actuator'
        metrics_path: '/actuator/prometheus'
        scrape_interval: 1s
        static_configs:
          - targets: [ 'host.docker.internal:8080' ]

      - job_name: 'kafka'
        scrape_interval: 5s
        static_configs:
          - targets: ['host.docker.internal:9308']
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: prometheus-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.32.0 (HEAD)
      labels:
        io.kompose.network/docker-default: "true"
        io.kompose.service: prometheus
    spec:
      containers:
        - args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.console.libraries=/usr/share/prometheus/console_libraries
            - --web.console.templates=/usr/share/prometheus/consoles
          image: prom/prometheus
          name: prometheus
          ports:
            - containerPort: 9090
              hostPort: 9090
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-config
              subPath: prometheus.yml
      restartPolicy: Always
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: prometheus-claim0
  name: prometheus-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
    kompose.version: 1.32.0 (HEAD)
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: zookeeper
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml --out converted.yaml
        kompose.version: 1.32.0 (HEAD)
      labels:
        io.kompose.network/docker-default: "true"
        io.kompose.service: zookeeper
    spec:
      containers:
        - env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          image: bitnami/zookeeper:latest
          name: zookeeper
          ports:
            - containerPort: 2181
              hostPort: 2181
              protocol: TCP
      restartPolicy: Always

